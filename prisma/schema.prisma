// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  SUPPERADMIN
  ADMIN
  USER
}

enum StatusTask {
  OPEN
  DOING
  COMPLETED
  ILLEGAL
  PENDDING
}

enum RoleProjectGroup {
  ADMIN
  MANAGER
  USER
}

enum StatusVerify {
  REJECT
  PENDDING
  APPROVED
}

model User {
  id                Int            @id @default(autoincrement())
  firstName         String
  lastName          String
  birthday          DateTime
  email             String         @unique
  password          String
  thumbnail         String
  phone             String
  gender            String
  role              RoleType
  deleteFlg         Boolean
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Notification      Notification[]
  UserProject       UserProject[]  @relation("project_user")
  UserGroup         UserGroup[]    @relation("group_user")
  UserItem          UserItem[]
  UserTask          UserTask[]
  UserGroupParent   UserGroup[]    @relation("group_parent")
  UserProjectParent UserProject[]  @relation("project_parent")
  CommentTask       CommentTask[]
}

model Notification {
  id           Int     @id @default(autoincrement())
  id_user      Int
  User         User?   @relation(fields: [id_user], references: [id])
  descriptions String
  deleteFlg    Boolean @default(true)
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  typeName    String        @default("project")
  startDate   DateTime
  endDate     DateTime
  deleteFlg   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Group       Group[]
  UserProject UserProject[]
  Document    Document[]
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String
  typeName   String      @default("group")
  deleteFlg  Boolean     @default(false)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  id_project Int?
  Project    Project?    @relation(fields: [id_project], references: [id])
  Item       Item[]
  UserGroup  UserGroup[]
  Document   Document[]
}

model Item {
  id        Int        @id @default(autoincrement())
  name      String
  typeName  String     @default("item")
  deleteFlg Boolean    @default(false)
  startDate DateTime
  endDate   DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  id_group  Int?
  Group     Group?     @relation(fields: [id_group], references: [id])
  Task      Task[]
  UserItem  UserItem[]
}

model Task {
  id Int @id @default(autoincrement())

  id_item Int?

  Item Item? @relation(fields: [id_item], references: [id])

  descriptions String

  deleteFlg Boolean @default(false)

  status StatusTask

  thumbnail String[]

  start_Time String?

  end_Time String?

  private Boolean @default(false)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  level           String?
  UserTask        UserTask[]    @relation("user_asggin")
  TaskUserManager UserTask[]    @relation("user_manager")
  taskParentId    Int?
  taskParent      Task?         @relation("task_parent", fields: [taskParentId], references: [id])
  taskChildren    Task[]        @relation("task_parent")
  History         History[]
  CommentTask     CommentTask[]
}

model History {
  id Int @id @default(autoincrement())

  descriptions String?

  status StatusTask?

  start_Time String?

  end_Time String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskHistory Int
  TaskHistory Task @relation(fields: [taskHistory], references: [id])
}

model UserProject {
  id             Int              @id @default(autoincrement())
  role           RoleProjectGroup
  status         StatusVerify
  type           String
  id_user_parent Int?
  id_user        Int
  id_project     Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserParent     User?            @relation("project_parent", fields: [id_user_parent], references: [id])
  User           User?            @relation("project_user", fields: [id_user], references: [id])
  Project        Project?         @relation(fields: [id_project], references: [id])
}

model UserGroup {
  id             Int              @id @default(autoincrement())
  role           RoleProjectGroup
  status         StatusVerify
  type           String
  deleteFlg      Boolean          @default(false)
  id_user_parent Int?
  id_user        Int
  id_group       Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserParent     User?            @relation("group_parent", fields: [id_user_parent], references: [id])
  User           User?            @relation("group_user", fields: [id_user], references: [id])
  Group          Group?           @relation(fields: [id_group], references: [id])
  userId         Int?
}

model UserItem {
  id        Int     @id @default(autoincrement())
  id_user   Int
  deleteFlg Boolean @default(false)
  id_item   Int?
  User      User?   @relation(fields: [id_user], references: [id])
  Item      Item?   @relation(fields: [id_item], references: [id])
}

model UserTask {
  id              Int     @id @default(autoincrement())
  deleteFlg       Boolean @default(false)
  id_user         Int
  id_task         Int?
  id_taskManager  Int?
  userManager     Int?
  User            User?   @relation(fields: [id_user], references: [id])
  Task            Task?   @relation("user_asggin", fields: [id_task], references: [id])
  TaskUserManager Task?   @relation("user_manager", fields: [id_taskManager], references: [id])
}

model Document {
  id          Int      @id @default(autoincrement())
  deleteFlg   Boolean  @default(false)
  data        String
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   Int?
  projectDocs Project? @relation(fields: [projectId], references: [id])
  groupId     Int?
  groupDocs   Group?   @relation(fields: [groupId], references: [id])
}

model CommentTask {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleteFlg   Boolean  @default(false)
  taskId      Int
  commentTask Task     @relation(fields: [taskId], references: [id])
  userId      Int
  UserComment User     @relation(fields: [userId], references: [id])
}
